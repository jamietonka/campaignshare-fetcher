from __future__ import annotations

import hashlib
import json
import time
import urllib.error
import urllib.request
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, Iterable, Any

UA = "campaignshare/0.3 (+https://github.com/jamietonka/campaignshare-fetcher)"


def _http_get(url: str, timeout: float = 20.0) -> bytes:
    req = urllib.request.Request(url, headers={"User-Agent": UA})
    with urllib.request.urlopen(req, timeout=timeout) as resp:
        return resp.read()


# -------- Normalizers --------
def _rss_text(parent: ET.Element, tag: str) -> str | None:
    el = parent.find(tag)
    return el.text.strip() if el is not None and el.text else None


def _norm_rss_item(item: ET.Element) -> Dict[str, Any]:
    title = _rss_text(item, "title") or ""
    link = _rss_text(item, "link") or ""
    guid = _rss_text(item, "guid") or link or title
    pub = _rss_text(item, "pubDate") or ""
    stable = guid or link or title or str(time.time())
    nid = hashlib.sha1(stable.encode("utf-8")).hexdigest()
    return {
        "id": nid,
        "title": title,
        "url": link,
        "summary": "",
        "created_at": pub,
        "tags": ["rss"],
    }


def _norm_atom_entry(entry: ET.Element) -> Dict[str, Any]:
    ns = {"atom": "http://www.w3.org/2005/Atom"}
    # title
    t = entry.find("atom:title", ns)
    title = (t.text or "").strip() if t is not None and t.text else ""
    # link href (prefer rel=alternate)
    link = ""
    for ln in entry.findall("atom:link", ns):
        rel = ln.attrib.get("rel", "alternate")
        href = ln.attrib.get("href", "")
        if rel == "alternate" and href:
            link = href
            break
        if not link and href:
            link = href
    # id / updated / published
    id_el = entry.find("atom:id", ns)
    guid = (id_el.text or "").strip() if id_el is not None and id_el.text else link or title
    updated = entry.find("atom:updated", ns)
    published = entry.find("atom:published", ns)
    when = ((published.text if published is not None else "") or (updated.text if updated is not None else "")).strip()
    stable = guid or link or title or str(time.time(
